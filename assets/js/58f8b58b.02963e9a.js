"use strict";(self.webpackChunkckb_sdk=self.webpackChunkckb_sdk||[]).push([[5874],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),i=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=i(a),m=r,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(h,s(s({ref:t},p),{},{components:a})):n.createElement(h,s({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var i=2;i<o;i++)s[i]=a[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9083:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var n=a(7462),r=(a(7294),a(3905));a(4996);const o={id:"debug-replay-rpc",title:"Debug a transaction via RPC"},s=void 0,l={unversionedId:"debug-replay-rpc",id:"debug-replay-rpc",title:"Debug a transaction via RPC",description:"Introduction",source:"@site/docs/debugRPC.md",sourceDirName:".",slug:"/debug-replay-rpc",permalink:"/debug-replay-rpc",draft:!1,tags:[],version:"current",frontMatter:{id:"debug-replay-rpc",title:"Debug a transaction via RPC"},sidebar:"sidebar2",previous:{title:"How Godwoken experiments gasless transaction using simplified ERC-4337 proposal",permalink:"/gasless-with-ERC4337"},next:{title:"Integration Guide for Ethereum Developers",permalink:"/integration"}},c={},i=[{value:"Introduction",id:"introduction",level:2},{value:"Steps",id:"steps",level:2}],p={toc:i};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Polyjuice is an Ethereum-compatible layer that runs on top of Godwoken, a layer 2 framework for Nervos CKB. Polyjuice allows you to deploy and run Ethereum smart contracts on Nervos network with minimal changes."),(0,r.kt)("p",null,"When you send an Ethereum transaction to ",(0,r.kt)("a",{parentName:"p",href:"https://docs.godwoken.io/connectionInfo"},"Godwoken's RPC"),", it will be transformed into a Godwoken transaction and executed by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/godwokenrises/godwoken/tree/develop/gwos-evm"},"the EVM backend, a.k.a. Polyjuice"),". If your transaction fails, you may want to debug it and find out the root cause of the error."),(0,r.kt)("p",null,"In this document, we will show you how to debug a failed transaction through ",(0,r.kt)("inlineCode",{parentName:"p"},"gw_debug_replay_transaction")," RPC. You will need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A node running Godwoken with ",(0,r.kt)("inlineCode",{parentName:"li"},"debug")," module enabled"),(0,r.kt)("li",{parentName:"ul"},"The transaction hash of an Ethereum compatible transaction"),(0,r.kt)("li",{parentName:"ul"},"A tool that can send JSON-RPC requests, such as curl or Postman")),(0,r.kt)("h2",{id:"steps"},"Steps"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Find out ",(0,r.kt)("strong",{parentName:"p"},"the transaction hash")," of the failed Ethereum transaction. You can use an explorer like ",(0,r.kt)("a",{parentName:"p",href:"https://gwscan.com"},"gwscan")," to search for your transaction by its sender address, receiver address, or just transcation hash.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Connect to your node's JSON-RPC endpoint using curl or Postman. For example, if your node is running on localhost:8024, you can use curl as follows:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST http://localhost:8024 -H "Content-Type: application/json" --data \'{"jsonrpc":"2.0","method":"<method>","params":["<params>"],"id":1\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Use the RPC method ",(0,r.kt)("inlineCode",{parentName:"li"},"poly_getGwTxHashByEthTxHash")," to transform your Ethereum transaction hash into a Godwoken transaction hash. You need to pass the Ethereum transaction hash as the parameter. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST https://v1.mainnet.godwoken.io/rpc/ -H "Content-Type: application/json" --data \'{"jsonrpc":"2.0","method":"poly_getGwTxHashByEthTxHash","params":["0x86a575206f2ee718aa2614dee59f9fd2c5250016465ea6c2c81cb6443750bb19"],"id":1}\'\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"The response will contain a JSON object that shows the Godwoken transaction hash in hexadecimal format. You can copy this value for later use.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"jsonrpc":"2.0","id":1,"result":"0xc1b075433c01b73bb91064bbcbd1cc92f7c6c5a57977569de816f6d88ddd64a1"}\n')),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"Use the debug RPC method ",(0,r.kt)("inlineCode",{parentName:"li"},"gw_debug_replay_transaction")," to get the contract logs of the failed transaction. You need to pass the Godwoken transaction hash as the parameter. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl --location --request POST https://v1.mainnet.godwoken.io/rpc/ --header \'Content-Type: application/json\' --data-raw \'{"id": 42, "jsonrpc": "2.0", "method": "gw_debug_replay_transaction", "params": ["0xc1b075433c01b73bb91064bbcbd1cc92f7c6c5a57977569de816f6d88ddd64a1"]}\' \n')),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},"The response will contain a JSON object that shows an array of contract logs generated by the execution of the Godwoken transaction. ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt"},'      "END call",\n      "[handle_message] used_memory(Bytes) => 5696",\n      "[handle_message] gas left => 0",\n      "[handle_message] status_code => 3",\n      "[call] revert with snapshot id => 12",\n      "inner call failed (transfer/contract call contract) => 3",\n      "call.res.status_code => 3",\n      "END call", more logs ...\n')),(0,r.kt)("ol",{start:7},(0,r.kt)("li",{parentName:"ol"},"You can inspect these logs to find out where and why your transaction failed. For example, you can look for logs that contain error messages or revert reasons from your smart contract code.")))}u.isMDXComponent=!0}}]);